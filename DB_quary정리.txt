mysql 
데이터베이스 -> 테이블 -> 데이터
데이터베이스 종류
관계형 데이터베이스
비관계형 데이터베이스(nosql) - 데이터 분석용
시계열 데이터베이스 - 데이터분석용
빅데이터
-sql
DML(note auto commit) : SELECT, UPDATE, DELETE, INSERT - > (신입 기준) 대부분 이거함
*DBeaver , workbench 같은 툴을 사용할 경우
 DML이 오토 커밋으로 설정되어 있어 해제하고 작업해야함
(dbeaver auto commit 해제)
DDL(auto commit): CREATE ,ALTER ,DROP
DCL(auto commit): GRANT, REVOKE

empno: 사원 번호
ename: 사원 이름
job: 사원 직책
mgr: 사수 번호
hiredate: 입사 날짜
sal: 급여
comm:보너스
deptno:부서번호


-- select: 조회할 때 사용
-- select<컬럼이름> from <테이블 이름>
select ename from emp; 
-- 1개 이상 컬럼을 조회할 때는 ,콤마 사용
select ename, empno from emp
-- 사원번호, 사원이름, 직책 조회
select EMPNO ,ENAME , JOB from emp;
-- as(별칭)
select ename as '사원이름'from emp
-- as 사원번호
select EMPNO  as '사원번호'from emp

-- select: 조회할 때 사용
-- select<컬럼이름> from <테이블 이름>
select ename from emp; 
-- 1개 이상 컬럼을 조회할 때는 ,콤마 사용
select ename, empno from emp
-- 사원번호, 사원이름, 직책 조회
select EMPNO ,ENAME , JOB from emp;
-- as(별칭)
select ename as '사원이름'from emp
-- as 사원번호
select EMPNO  as '사원번호'from emp

select * from emp
-- where
-- 20번 부서 사원 모두 조회
select * from emp where DEPTNO = 20;
-- 문제1. job이 manager인 사원이름, 번호, 직책, 입사날짜 조회
select ename, EMPNO ,job, hiredate from emp where job = 'manager'; 
-- 문제2. job이 manager, salesman인 사원번호, 사원이름 조회
select ename, EMPNO from emp where job = 'manager' or 'salesman';
-- 문제3. 사원이름이 ALLEN인 사원의 이름, 직책,입사날짜 조회
select ENAME,JOB,HIREDATE from emp where ENAME ='ALLEN';
-- 사원이름이 A로 시작한느 사원의 이름,사원번호 조회
select ENAME,EMPNO  from emp where ENAME like 'A%';
-- 사원 이름에 L이 두번 들어간 사원이름, 번호 조회
select ENAME, EMPNO from EMP where ENAME like '%L%L%';

-- 보너스를 받지 못한 사원의 급여와 번호를 조회
select SAL ,EMPNO from emp where COMM is null;
-- 보너스를 받은 사원의 급여와 번호를 조회
select SAL ,EMPNO from emp where COMM is not null;
-- 입사날짜가 1987-06-28 이상인 사원이름, 번호, 직책 조회
select ename, empno, job, hiredate from emp where HIREDATE >= '1987-06-28';
-- 문제4.입사일이 1980-12-17 ~ 1982-01-23 사이에 입사한 사원의 이름, 번호, 입사날짜, 직책을 조회하시오.
select ENAME, EMPNO ,JOB ,HIREDATE from emp 
where HIREDATE >='1980-12-17'and HIREDATE <='1982-01-23';
-- 문제5. 직업이 MANAGER고, 급여가 1300이상 받은 사원번호,이름,급여,직업 조회
select EMPNO, ename, sal, job from emp where JOB ='MANAGER'and SAL >=1300;
-- avg, count, max, min 함수 (단일행 함수)
-- 직업이 manager인 사원들의 급여 평균 조회
select avg(sal) as "급여 평균", job from emp where job = 'manager';
-- 직업이 CLERK인 사원 수 조회
select COUNT(EMPNO)  from EMP where JOB = 'CLERK';
-- 직업이 CLERK인 급여 최대값 조회
select MAX(SAL) from EMP where JOB = 'CLERK'
-- 직업이 CLERK인 급여 최솟값 조회
select MIN(SAL) from EMP where JOB = 'CLERK'

-- 문제6. 입사날짜가 '1987-06-28' 이상인 사원들의 수와 급여 평균 조회
select COUNT(ENAME), AVG(SAL) from emp where HIREDATE >='1987-06-28';
-- 문제7. 직책이 MANAGER가 아닌 사원이름, 직책 조회
select ENAME, JOB from EMP where JOB != 'MANAGER';
-- 문제8. 사원 이름이 'SCOTT','JONES'인 사원의 이름,번호,급여, 입사날짜 조회
select ENAME, EMPNO, SAL, HIREDATE from EMP where ENAME ='SCOTT'or ENAME ='JONES';
---------------------------------------------------------------------------------------
-- sql 실행 순서
-- from -> where -> group -- by -> having ->select->order by
-- group by: 특정 컬럼을 그룹핑하는 sql문법
-- job별로 group by 하기
-- group by할 컬럼을 select 에도 써주자!
select job as '직책 그룹핑' from emp group by job
-- 입사날짜로 group by
select HIREDATE from emp group by HIREDATE;
-- 입사날짜를 년도 별로 group by
-- date_format()sql 내장함수, 날짜를 원하는 대로 포맷팅 해줌
-- %Y: year년도, %M, month(월), %d: day(일)
 select HIREDATE from emp group by date_format(HIREDATE,'%Y'); //
 select date_format(HIREDATE,'%Y')as '입사년도',count(EMPNO) as '사원수' from emp group by date_format(HIREDATE,'%Y'); 
-- 문제. 부서별로 그룹핑하고 부서인원 수도 출력하시오.
select deptno, count(empno) as '부서 인원 수' from emp group by DEPTNO;
-- 20번 부서를 제외한 나머지 부서 그룹핑
select deptno from emp where DEPTNO != 20 group by deptno;
-- having: group by된 결과를 필터링할때 사용
-- where: 필터링
-- where 조건 안쓰고 having으로 사용하기
-- having 과 where 차이점
-- 1. sql 실행 순서가 다르다.
-- 2. where 조건에 집계함수(count, max, min, avg, ...)으로 비교 불가능
-- 3. having은 집계함수 비교 가능
select DEPTNO as "부서 번호", count(EMPNO) as "사원 수"
from emp group by DEPTNO having count(EMPNO)>=4; 
-- group by 된 결과를 필터링하고 싶을 때 사용
-- 문제1. 부서별로 급여합계를 그룹핑 하시오.
select sum(sal)as "부서별 급여합계", DEPTNO  from emp group by DEPTNO;
-- 문제2. 문제 1번에서 급여합계가 5000이상인 부서만 조회
select sum(sal)as "부서별 급여합계", DEPTNO as "부서 번호" from emp group by DEPTNO having sum(sal)>=5000;
-- 문제3. 문제 2번에서 10번 30번 부서 제외
select sum(sal)as "부서별 급여합계", DEPTNO as "부서 번호" from emp where DEPTNO = 20 group by DEPTNO having sum(sal)>=5000;


-- 문제4. 입사날짜를 월별로 그룹핑하고 월별 입사자를 출력하시오.
select date_format(HIREDATE,'%M') as '입사 월', COUNT(EMPNO) as '입사 사원 수' from emp group by date_format(HIREDATE,'%M');
-- 문제5. 직책별로 그룹핑하고 평균 급여를 조회하고, 평균 급여가 1000이 넘는 직책만 출력하시오.(단 직책이 manager는 제외)
select JOB, avg(SAL) from emp where JOB !='MANAGER' group by JOB having avg(SAL)>1000; 
-- 문제6. 1982년도에 입사한 모든 사원의 정보 조회
select * from emp where date_format(HIREDATE,'%Y')='1982';
-- 문제7. 급여가 1500~2850 사이의 범위에 속하는 사원 이름, 급여, 직책 조회
select ENAME, SAL, JOB from emp where SAL>=1500 and SAL <=2850;

-- ORDER BY:특정 컬럼을 정렬할때 사용(항상 마지막에 실행 됨)
-- 아래 쿼리는  오름차순(디폴트값)
select SAL, ENAME  from EMP order by SAL;
-- 아래 쿼리는  내림차순
select SAL, ENAME  from EMP order by SAL DESC;
-- 컬럼 위치로 정렬하기
-- ORDER BY는 항상 마지막에 실행되기 때문에 SELECT 컬럼 순서를 알고 있다.
select ENAME, SAL from emp order by 2 desc;

-- 총 정리
select DEPTNO, count(EMPNO), sum(SAL) from emp
where DEPTNO != 10
group by DEPTNO 
having count(EMPNO) >=3
order by count(EMPNO) desc; 

## delete, update, insert
-- delete (데이터 삭제)
-- 삭제할때는 항상 where조건으로 삭제하자
-- delete from emp
-- truncate 테이블안에 있는 데이터를 데이터를 초기화
-- truncate table emp;
-- commit(완전 저장), rollback(이전 상태로 돌아가기)
-- auto commit을 해제 하면 rollback(뒤 돌아가기)으로 돌아갈 수 있음
-- auto commit설정되어 있으면 rollback명령어 불가능!




