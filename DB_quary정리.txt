mysql 
데이터베이스 -> 테이블 -> 데이터
데이터베이스 종류
관계형 데이터베이스
비관계형 데이터베이스(nosql) - 데이터 분석용
시계열 데이터베이스 - 데이터분석용
빅데이터
-sql
DML(note auto commit) : SELECT, UPDATE, DELETE, INSERT - > (신입 기준) 대부분 이거함
*DBeaver , workbench 같은 툴을 사용할 경우
 DML이 오토 커밋으로 설정되어 있어 해제하고 작업해야함
(dbeaver auto commit 해제)
DDL(auto commit): CREATE ,ALTER ,DROP
DCL(auto commit): GRANT, REVOKE

empno: 사원 번호
ename: 사원 이름
job: 사원 직책
mgr: 사수 번호
hiredate: 입사 날짜
sal: 급여
comm:보너스
deptno:부서번호




-- select: 조회할 때 사용
-- select<컬럼이름> from <테이블 이름>
select ename from emp; 
-- 1개 이상 컬럼을 조회할 때는 ,콤마 사용
select ename, empno from emp
-- 사원번호, 사원이름, 직책 조회
select EMPNO ,ENAME , JOB from emp;
-- as(별칭)
select ename as '사원이름'from emp
-- as 사원번호
select EMPNO  as '사원번호'from emp

select * from emp
-- where
-- 20번 부서 사원 모두 조회
select * from emp where DEPTNO = 20;
-- 문제1. job이 manager인 사원이름, 번호, 직책, 입사날짜 조회
select ename, EMPNO ,job, hiredate from emp where job = 'manager'; 
-- 문제2. job이 manager, salesman인 사원번호, 사원이름 조회
select ename, EMPNO from emp where job = 'manager' or 'salesman';
-- 문제3. 사원이름이 ALLEN인 사원의 이름, 직책,입사날짜 조회
select ENAME,JOB,HIREDATE from emp where ENAME ='ALLEN';
-- 사원이름이 A로 시작한느 사원의 이름,사원번호 조회
select ENAME,EMPNO  from emp where ENAME like 'A%';
-- 사원 이름에 L이 두번 들어간 사원이름, 번호 조회
select ENAME, EMPNO from EMP where ENAME like '%L%L%';

-- 보너스를 받지 못한 사원의 급여와 번호를 조회
select SAL ,EMPNO from emp where COMM is null;
-- 보너스를 받은 사원의 급여와 번호를 조회
select SAL ,EMPNO from emp where COMM is not null;
-- 입사날짜가 1987-06-28 이상인 사원이름, 번호, 직책 조회
select ename, empno, job, hiredate from emp where HIREDATE >= '1987-06-28';
-- 문제4.입사일이 1980-12-17 ~ 1982-01-23 사이에 입사한 사원의 이름, 번호, 입사날짜, 직책을 조회하시오.
select ENAME, EMPNO ,JOB ,HIREDATE from emp 
where HIREDATE >='1980-12-17'and HIREDATE <='1982-01-23';
-- 문제5. 직업이 MANAGER고, 급여가 1300이상 받은 사원번호,이름,급여,직업 조회
select EMPNO, ename, sal, job from emp where JOB ='MANAGER'and SAL >=1300;
-- avg, count, max, min 함수 (단일행 함수)
-- 직업이 manager인 사원들의 급여 평균 조회
select avg(sal) as "급여 평균", job from emp where job = 'manager';
-- 직업이 CLERK인 사원 수 조회
select COUNT(EMPNO)  from EMP where JOB = 'CLERK';
-- 직업이 CLERK인 급여 최대값 조회
select MAX(SAL) from EMP where JOB = 'CLERK'
-- 직업이 CLERK인 급여 최솟값 조회
select MIN(SAL) from EMP where JOB = 'CLERK'

-- 문제6. 입사날짜가 '1987-06-28' 이상인 사원들의 수와 급여 평균 조회
select COUNT(ENAME), AVG(SAL) from emp where HIREDATE >='1987-06-28';
-- 문제7. 직책이 MANAGER가 아닌 사원이름, 직책 조회
select ENAME, JOB from EMP where JOB != 'MANAGER';
-- 문제8. 사원 이름이 'SCOTT','JONES'인 사원의 이름,번호,급여, 입사날짜 조회
select ENAME, EMPNO, SAL, HIREDATE from EMP where ENAME ='SCOTT'or ENAME ='JONES';
---------------------------------------------------------------------------------------
-- sql 실행 순서
-- from -> where -> group -- by -> having ->select->order by
-- group by: 특정 컬럼을 그룹핑하는 sql문법
-- job별로 group by 하기
-- group by할 컬럼을 select 에도 써주자!
select job as '직책 그룹핑' from emp group by job
-- 입사날짜로 group by
select HIREDATE from emp group by HIREDATE;
-- 입사날짜를 년도 별로 group by
-- date_format()sql 내장함수, 날짜를 원하는 대로 포맷팅 해줌
-- %Y: year년도, %M, month(월), %d: day(일)
 select HIREDATE from emp group by date_format(HIREDATE,'%Y'); //
 select date_format(HIREDATE,'%Y')as '입사년도',count(EMPNO) as '사원수' from emp group by date_format(HIREDATE,'%Y'); 
-- 문제. 부서별로 그룹핑하고 부서인원 수도 출력하시오.
select deptno, count(empno) as '부서 인원 수' from emp group by DEPTNO;
-- 20번 부서를 제외한 나머지 부서 그룹핑
select deptno from emp where DEPTNO != 20 group by deptno;
-- having: group by된 결과를 필터링할때 사용
-- where: 필터링
-- where 조건 안쓰고 having으로 사용하기
-- having 과 where 차이점
-- 1. sql 실행 순서가 다르다.
-- 2. where 조건에 집계함수(count, max, min, avg, ...)으로 비교 불가능
-- 3. having은 집계함수 비교 가능
select DEPTNO as "부서 번호", count(EMPNO) as "사원 수"
from emp group by DEPTNO having count(EMPNO)>=4; 
-- group by 된 결과를 필터링하고 싶을 때 사용
-- 문제1. 부서별로 급여합계를 그룹핑 하시오.
select sum(sal)as "부서별 급여합계", DEPTNO  from emp group by DEPTNO;
-- 문제2. 문제 1번에서 급여합계가 5000이상인 부서만 조회
select sum(sal)as "부서별 급여합계", DEPTNO as "부서 번호" from emp group by DEPTNO having sum(sal)>=5000;
-- 문제3. 문제 2번에서 10번 30번 부서 제외
select sum(sal)as "부서별 급여합계", DEPTNO as "부서 번호" from emp where DEPTNO = 20 group by DEPTNO having sum(sal)>=5000;


-- 문제4. 입사날짜를 월별로 그룹핑하고 월별 입사자를 출력하시오.
select date_format(HIREDATE,'%M') as '입사 월', COUNT(EMPNO) as '입사 사원 수' from emp group by date_format(HIREDATE,'%M');
-- 문제5. 직책별로 그룹핑하고 평균 급여를 조회하고, 평균 급여가 1000이 넘는 직책만 출력하시오.(단 직책이 manager는 제외)
select JOB, avg(SAL) from emp where JOB !='MANAGER' group by JOB having avg(SAL)>1000; 
-- 문제6. 1982년도에 입사한 모든 사원의 정보 조회
select * from emp where date_format(HIREDATE,'%Y')='1982';
-- 문제7. 급여가 1500~2850 사이의 범위에 속하는 사원 이름, 급여, 직책 조회
select ENAME, SAL, JOB from emp where SAL>=1500 and SAL <=2850;

-- ORDER BY:특정 컬럼을 정렬할때 사용(항상 마지막에 실행 됨)
-- 아래 쿼리는  오름차순(디폴트값)
select SAL, ENAME  from EMP order by SAL;
-- 아래 쿼리는  내림차순
select SAL, ENAME  from EMP order by SAL DESC;
-- 컬럼 위치로 정렬하기
-- ORDER BY는 항상 마지막에 실행되기 때문에 SELECT 컬럼 순서를 알고 있다.
select ENAME, SAL from emp order by 2 desc;

-- 총 정리
select DEPTNO, count(EMPNO), sum(SAL) from emp
where DEPTNO != 10
group by DEPTNO 
having count(EMPNO) >=3
order by count(EMPNO) desc; 

## delete, update, insert
-- delete (데이터 삭제)
-- 삭제할때는 항상 where조건으로 삭제하자
-- delete from emp
-- truncate 테이블안에 있는 데이터를 데이터를 초기화
-- truncate table emp;
-- commit(완전 저장), rollback(이전 상태로 돌아가기)
-- auto commit을 해제 하면 rollback(뒤 돌아가기)으로 돌아갈 수 있음
-- auto commit설정되어 있으면 rollback명령어 불가능!

-- join**
-- 관계형데이터베이스를 사용하면 join을 무조건 사용!
-- depno: 부서번호, dname: 부서이름, loc: 부서위치
-- 조인은 컬럼 이름이 같다고 해서 되는게아니라, 데이터타입이 서로 같아야한다.
-- 컬럼 이름이 같은 이후는 사용자(개발자) 편의성을 위해서 같게 해준다.

-- join문법
-- 테이블 이름에도 as를 사용할 수 있다.
-- 방법1.
select e.ename, e.DEPTNO , d.DNAME from emp as e
inner join dept as d
on e.DEPTNO = d.DEPTNO 
-- 방법2.(추천 x)
-- where 조건으로도 사용할 수 있지만
-- where가 나온 목적은 연산자(비교)를 이용해서 필터링을 하는게 목적이다.
-- 때문에 아래 방법보다는 방법1로 join을 사용하자
select e.ename, e.DEPTNO , d.DNAME from emp as e,
dept as d
where  e.DEPTNO = d.DEPTNO
-- 사원번호가 7788인 사람의 이름,직책,부서번호,부서이름,근무지역을 조회하시오.
select * from emp;
-- 조인 팁:두 테이블 교집합 컬럼을 찾자!
-- select ENAME, job, DEPTNO, dname, loc from emp where EMPNO =7788
select e.ename, e.job,e.deptno , d.DNAME,d.loc from emp as e
inner join dept as d
on e.DEPTNO  = d.DEPTNO 
where e.EMPNO  = 7788
-- 부서별로 그룹핑을 하고 부서번호와 부서이름을 조회하시오.
-- join 문법은 from과 where 사이에 온다.
select e.deptno,d.dname from emp as e
inner join dept as d
on e.deptno = d.deptno
group by e.deptno;

-- 직책이 manager인 사원들의 이름, 부서이름, 부서위치를 조회하시오.
select e.ename as "사원 이름",
e.job as "직책", 
d.DNAME as "부서 이름",
d.loc as "부서 위치" 
from emp as e
inner join dept as d
on e.DEPTNO  = d.DEPTNO 
where e.job  = 'MANAGER';
-- inner join(교집합)에서 순서는 상관없지만 
-- right join과 left join은 상관있다.
select * from dept as d
inner join emp as e 
-- left join(차집합), right join(차집합): outer조인
-- 40번 부서만 조회
select * from dept where deptno = 40;
-- emp테이블에 없는 부서번호 조회
select * from emp as e
right join dept as d
on d.deptno = e.deptno
where e.empno is null;

-- self join (inner join하고 같음)
-- 그러나 자기 자신을 조인함 즉, 1개 테이블을 사용
-- boss: 상사, underling: 부하
select 
	boss.empno as "상사 번호",
	boss.ename as "상사 이름",
	underling.empno as "부하직원 번호",
	underling.ename as "부하직원 이름"
from emp as boss
inner join emp as underling
on boss.empno = underling.mgr

-- emp에 insert하기
insert into emp(empno, ename, job, sal, hiredate)
values (8000, '손흥민','SALESMAN', 7000, NOW());

-- 문제. 아우터 조인(left or right) 이용하기
-- 부서에 소속되어 있지 않는 사원 번호, 이름, 입사날짜 조회
select e.empno as "사원 번호",
e.ename as "사원 이름",
e.hiredate as "입사 날짜" 
from emp as e
left join dept as d
on e.DEPTNO  = d.DEPTNO 
where D.DNAME is null;

-- 사원번호가 8000인 사원의 급여를 8000으로 업데이트 하시오.
-- update는 from을 명시하지 않는 다.
-- delete from을 써준다.

update emp
set sal = 8000
where empno = 8000;


-- join**
-- 관계형데이터베이스를 사용하면 join을 무조건 사용!
-- depno: 부서번호, dname: 부서이름, loc: 부서위치
-- 조인은 컬럼 이름이 같다고 해서 되는게아니라, 데이터타입이 서로 같아야한다.
-- 컬럼 이름이 같은 이후는 사용자(개발자) 편의성을 위해서 같게 해준다.

-- join문법
-- 테이블 이름에도 as를 사용할 수 있다.
-- 방법1.
select e.ename, e.DEPTNO , d.DNAME from emp as e
inner join dept as d
on e.DEPTNO = d.DEPTNO 
-- 방법2.(추천 x)
-- where 조건으로도 사용할 수 있지만
-- where가 나온 목적은 연산자(비교)를 이용해서 필터링을 하는게 목적이다.
-- 때문에 아래 방법보다는 방법1로 join을 사용하자
select e.ename, e.DEPTNO , d.DNAME from emp as e,
dept as d
where  e.DEPTNO = d.DEPTNO
-- 사원번호가 7788인 사람의 이름,직책,부서번호,부서이름,근무지역을 조회하시오.
select * from emp;
-- 조인 팁:두 테이블 교집합 컬럼을 찾자!
-- select ENAME, job, DEPTNO, dname, loc from emp where EMPNO =7788
select e.ename, e.job,e.deptno , d.DNAME,d.loc from emp as e
inner join dept as d
on e.DEPTNO  = d.DEPTNO 
where e.EMPNO  = 7788
-- 부서별로 그룹핑을 하고 부서번호와 부서이름을 조회하시오.
-- join 문법은 from과 where 사이에 온다.
select e.deptno,d.dname from emp as e
inner join dept as d
on e.deptno = d.deptno
group by e.deptno;

-- 직책이 manager인 사원들의 이름, 부서이름, 부서위치를 조회하시오.
select e.ename as "사원 이름",
e.job as "직책", 
d.DNAME as "부서 이름",
d.loc as "부서 위치" 
from emp as e
inner join dept as d
on e.DEPTNO  = d.DEPTNO 
where e.job  = 'MANAGER';
-- inner join(교집합)에서 순서는 상관없지만 
-- right join과 left join은 상관있다.
select * from dept as d
inner join emp as e 
-- left join(차집합), right join(차집합): outer조인
-- 40번 부서만 조회
select * from dept where deptno = 40;
-- emp테이블에 없는 부서번호 조회
select * from emp as e
right join dept as d
on d.deptno = e.deptno
where e.empno is null;

-- self join (inner join하고 같음)
-- 그러나 자기 자신을 조인함 즉, 1개 테이블을 사용
-- boss: 상사, underling: 부하
select 
	boss.empno as "상사 번호",
	boss.ename as "상사 이름",
	underling.empno as "부하직원 번호",
	underling.ename as "부하직원 이름"
from emp as boss
inner join emp as underling
on boss.empno = underling.mgr

-- emp에 insert하기
insert into emp(empno, ename, job, sal, hiredate)
values (8000, '손흥민','SALESMAN', 7000, NOW());

-- 문제. 아우터 조인(left or right) 이용하기
-- 부서에 소속되어 있지 않는 사원 번호, 이름, 입사날짜 조회
select e.empno as "사원 번호",
e.ename as "사원 이름",
e.hiredate as "입사 날짜" 
from emp as e
left join dept as d
on e.DEPTNO  = d.DEPTNO 
where D.DNAME is null;

-- 사원번호가 8000인 사원의 급여를 8000으로 업데이트 하시오.
-- update는 from을 명시하지 않는 다.
-- delete from을 써준다.

update emp
set sal = 8000
where empno = 8000;

-- 1. 사원이름, 사원직책, 사원급여 조회.
select ename, job, sal from emp;
-- 2. 사수번호가 7839인 사원 번호, 이름, 입사날짜 조회.
select empno,ename, hiredate from emp where mgr=7839;
-- 3. 급여가 3000 이하인 사원의 모든 정보 조회.
select * from emp where sal<=3000; 
-- 4. 사원이름, 부서번호, 부서이름, 부서 근무지 조회.
select e.ename, d.DEPTNO ,d.DNAME,d.loc from emp as e
inner join dept as d
on e.DEPTNO  = d.DEPTNO 
-- 5. 부서별 급여합계, 부서이름 조회.
select sum(sal),d.dname from emp as e
inner join dept as d
on e.deptno = d.deptno
group by e.deptno;
-- 6. 부서 근무지가 NEW YORK이고, 직책이 MANAGER인 
--    사원의 이름, 급여를 조회. 
select e.ename, sal from emp as e 
inner join dept as d 
on e.deptno = d.deptno
where d.loc = 'NEW YORK' and 
e.job = 'MANAGER'
-- 7. 1983년 이후 입사한 사원의 보너스가 null
--    이면 100 주고, 사원의 이름, 부서이름, 직업을 조회. (ifnull 검색하기)
select 
	e.ename,
	d.dname,
	e.job, 
	ifnull(e.comm, '100') as "보너스"
from emp as e
inner join dept as d 
on e.deptno = d.deptno
where date_format(HIREDATE,'%Y')>=1983


-- 8.  부서명이 RESEARCH인 사원의 이름, 급여, 근무 지역 조회.
select e.ENAME , e.sal , d.LOC from emp as e
inner join dept as d
on e.deptno = d.DEPTNO 
where d.DNAME ='RESEARCH';
-- 9. 보너스를 받은 사원 이름, 직책, 급여, 부서명 조회.
select e.ENAME , e.sal ,e.job, d.dname
from emp as e
inner join dept as d
on e.deptno = d.DEPTNO 
where e.comm is not null;

-- 10. 이름 첫글 A자를 가진 사원 이름, 직책, 부서명, 부서 위치 조회.
select e.ENAME , e.sal ,e.job, d.dname, d.loc
from emp as e
inner join dept as d
on e.deptno = d.DEPTNO 
where e.ename like 'A%';

-- 11. 사원명, 사수번호, 사수 이름 조회.
--    단, 사수가 없는 사원도 포함
select 
	boss.ename as "사수 이름",
	boss.empno as "사수 번호",
	underling.ename as "사원명"
from emp as boss
right join emp as underling
on boss.empno = underling.mgr

-- 12. 사원명, 사수번호, 사수 이름 조회.
--    단, 사수가 없는 사원만
select 
	underling.ename as "사원명",
	boss.EMPNO as "사수 번호",
	boss.ENAME as "사수 이름"
from emp as boss
right join emp as underling
on boss.empno = underling.mgr
where underling.mgr is null;
-- 13. 상사번호가 7698인 사원의 이름, 사원번호, 상사번호, 상사이름 조회.
select
	underling.ename, 
	underling.empno,
	boss.empno,
	boss.ename 
from emp as boss
inner join emp as underling
on boss.empno = underling.mgr
where boss.EMPNO = 7698;
-- 14. 상사보다 먼저 입사한 사원의 사원이름, 사원의 입사일, 상사 이름, 상사 입사일 조회.
select
	underling.ENAME as "사원 이름", 
	underling.HIREDATE as "사원 입사일",
	boss.ENAME as "상사 이름",
	boss.HIREDATE as "상사 입사일"
from emp as boss
inner join emp as underling 
on boss.empno = underling.mgr
where boss.HIREDATE >underling.HIREDATE; 
-- 15. 업무가 MANAGER이거나 CLERK고 입사날짜가 1982년에 입사한
--  사원의 사원번호, 이름, 급여, 직업, 부서명 조회.
select
	e.EMPNO,
	e.ENAME,
	e.sal,
	e.job,
	d.DNAME 
from emp as e
left join dept as d 
on e.empno = d.DEPTNO 
where e.job in ('MANAGER', 'CLERK') and date_format(HIREDATE,'%Y') = 1982 
-- 16. 부서별 급여 총합 조회. 
--     단, 사원이 존재하지 않는 부서도 포함해서 급여 순으로 내림차순 하시오.
select 
	DEPTNO,
	sum(sal)
from emp
group by DEPTNO
order by SAL DESC; 
  
-- 17.  사원 이름, 상사 이름, 사원 부서번호, 사원 부서명, 사원 근무지역 조회. 
--     단, 사원이 존재하지 않는 부서번호와 부서명도 조회.
select
	e.ename as "사원 이름",
	d.loc as "사원 근무지역",
	d.deptno as "사원 부서번호",
	d.dname as "사원 부서명" 
from emp e
right join dept d
on d.DEPTNO  = e.EMPNO 
-- 18. 부서 위치가 CHICAGO이고 사수 급여가 5000 미만인 
--  사원 번호,사원 이름,사수 번호, 사수 이름, 사수 급여, 부서명을 조회.
--  단, 사원의 입사날짜로 오름차순.
select 
	underling.empno as "사원 번호",
	underling.ename as "사원 이름",
	boss.empno as "사수 번호",
	boss.ename as "사수 이름",
	boss.sal as "사수 급여",
	d.dname as "부서명"
from emp as boss
inner join emp as underling
on boss.EMPNO  = underling.MGR 
join dept as d 
where d.LOC ='CHICAGO' and boss.SAL <5000
order by underling.HIREDATE asc;
-- 19. 입사날짜를 월별로 몇명이 입사했는지 카운트해서 조회.
select 
	count()
from emp 
group by

-- SQL순서
-- 1. FROM 2.WHERE 3.GROUP BY 4.HAVING 5.select 6.ORDER BY
-- PK는 중복허용 x
-- FK는 중복이 가능함(index 없음)
-- TIP) 자주 조회하는 컬럼일수록 위에다 정의를 해야함
insert into dept (deptno, DNAME,LOC)
value(21,'DW아카데미','대전 선화동')
